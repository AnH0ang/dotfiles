#!/usr/bin/env -S uv run --script

# /// script
# requires-python = ">=3.11"
# dependencies = [
#   "questionary",
# ]
# ///

import json
import os
import subprocess
from pathlib import Path

import questionary  # type: ignore


def get_config_path() -> Path:
    """Get the path to the config file."""
    xdg_data_home = os.environ.get("XDG_DATA_HOME", os.path.expanduser("~"))
    return Path(xdg_data_home) / ".git_users.json"


def load_config(config_path: Path) -> dict:
    """Load the configuration file."""
    if not config_path.exists():
        config_path.touch()
        return {}

    try:
        with open(config_path) as f:
            return json.load(f) if config_path.stat().st_size > 0 else {}
    except json.JSONDecodeError:
        return {}


def save_config(config_path: Path, config: dict) -> None:
    """Save the configuration file."""
    with open(config_path, "w") as f:
        json.dump(config, f, indent=2)


def add_new_user(config: dict, config_path: Path) -> None:
    """Add a new user to the configuration."""
    # Get user input
    tag = questionary.text("Tag:").ask()
    name = questionary.text("User name:").ask()
    email = questionary.text("User email:").ask()

    # Add new user to config
    config[tag] = {"user.name": name, "user.email": email}

    save_config(config_path, config)


def select_user(config: dict, is_global: bool = True) -> None:
    """Select a user and configure git."""
    if not config:
        print("No users configured. Please add a user first.")
        return

    # Let user select from available tags
    user = questionary.select("Select a user:", choices=list(config.keys())).ask()

    if user:
        user_config = config[user]
        scope = ["--global"] if is_global else []

        # Set git configuration
        subprocess.run(["git", "config", *scope, "user.name", user_config["user.name"]], check=False)
        subprocess.run(["git", "config", *scope, "user.email", user_config["user.email"]], check=False)


def main() -> None:
    config_path = get_config_path()
    config = load_config(config_path)

    # Main menu
    action = questionary.select(
        "What do you want to do?",
        choices=["Select a global user", "Select a local user", "Add a new user"],
    ).ask()

    if action == "Add a new user":
        add_new_user(config, config_path)
    elif action == "Select a global user":
        select_user(config, is_global=True)
    elif action == "Select a local user":
        select_user(config, is_global=False)
    else:
        print("Invalid choice")


if __name__ == "__main__":
    main()
